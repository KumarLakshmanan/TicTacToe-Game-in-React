{"version":3,"sources":["App.js","index.js"],"names":["App","players","useState","board","setBoard","title","description","message","setMessage","modal","setModal","isReset","setReset","Math","floor","random","length","player","setPlayer","toggleModal","checkForWinner","newboard","sequence","index","switchPlayer","useEffect","className","map","e","i","cName","onClick","every","checkThisBox","style","textAlign","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38535e2d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction App() {\n\tconst players = [\"X\", \"O\"];\n\tconst [board, setBoard] = useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n\tconst [message, setMessage] = useState({ title: \"\", description: \"\" });\n\tconst [modal, setModal] = useState(false);\n\tconst [isReset, setReset] = useState(false);\n\tconst [player, setPlayer] = useState(\n\t\tplayers[Math.floor(Math.random() * players.length)]\n\t);\n\tconst resetBoard = () => {\n\t\tsetPlayer(players[Math.floor(Math.random() * players.length)]);\n\t\tsetReset(false);\n\t\tsetBoard([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n\t\tsetMessage({ title: \"\", description: \"\" });\n\t};\n\tconst checkThisBox = (e) => {\n\t\tif (!checkForWinner()) {\n\t\t\tlet newboard = [...board];\n\t\t\tif (newboard.every((e) => e !== \"\")) {\n\t\t\t\ttoggleModal(\n\t\t\t\t\t\"The Match is Tie\",\n\t\t\t\t\t\"From this Tic-Tac-Toe Game Both X & O players have same Memory and IQ capacity\"\n\t\t\t\t);\n\t\t\t\tsetReset(true);\n\t\t\t\treturn false;\n\t\t\t} else if (newboard[e]) {\n\t\t\t\ttoggleModal(\n\t\t\t\t\t\"The Box is Already filled\",\n\t\t\t\t\t`You cannot Rearrange the Box value. Because the Box is Already filled by ${board[e]}`\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tnewboard[e] = player;\n\t\t\t\tsetBoard(newboard);\n\t\t\t\tif (newboard.every((e) => e !== \"\")) {\n\t\t\t\t\ttoggleModal(\n\t\t\t\t\t\t\"The Match is Tie\",\n\t\t\t\t\t\t\"From this Tic-Tac-Toe Game Both X & O players have same Memory and IQ capacity\"\n\t\t\t\t\t);\n\t\t\t\t\tsetReset(true);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (!checkForWinner(newboard)) {\n\t\t\t\t\tswitchPlayer();\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\ttoggleModal(\n\t\t\t\t\t\t\"Player \" + player + \" wins\",\n\t\t\t\t\t\t\"The Player \" +\n\t\t\t\t\t\t\tplayer +\n\t\t\t\t\t\t\t\" have some extra talents than their opponent. So he/her wins the match\"\n\t\t\t\t\t);\n\t\t\t\t\tsetReset(true);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\ttoggleModal(\n\t\t\t\t\"Player \" + player + \" Already wins\",\n\t\t\t\t\"Reset this Board or Refresh this Page to play unlimited games and increase you skills\"\n\t\t\t);\n\t\t\tsetReset(true);\n\t\t}\n\t};\n\tconst toggleModal = (title = \"\", description = \"\") => {\n\t\tsetMessage({ title: title, description: description });\n\t\tsetModal(!modal);\n\t};\n\tconst checkForWinner = (newboard = board) => {\n\t\tlet sequence = [\n\t\t\t[0, 1, 2],\n\t\t\t[3, 4, 5],\n\t\t\t[6, 7, 8],\n\t\t\t[0, 3, 6],\n\t\t\t[1, 4, 7],\n\t\t\t[2, 5, 8],\n\t\t\t[0, 4, 8],\n\t\t\t[2, 4, 6],\n\t\t];\n\t\tfor (let index = 0; index < sequence.length; index++) {\n\t\t\tif (\n\t\t\t\tnewboard[sequence[index][0]] === newboard[sequence[index][1]] &&\n\t\t\t\tnewboard[sequence[index][0]] === newboard[sequence[index][2]] &&\n\t\t\t\tnewboard[sequence[index][0]] !== \"\"\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t};\n\tconst switchPlayer = () => {\n\t\tsetPlayer(player === \"X\" ? \"O\" : \"X\");\n\t};\n\tuseEffect(() => {}, [board, player]);\n\treturn (\n\t\t<>\n\t\t\t<div className='score'>Current Player : {player}</div>\n\t\t\t<div className='board'>\n\t\t\t\t{board.map((e, i) => {\n\t\t\t\t\tlet cName = \"box \";\n\t\t\t\t\tif (e === \"X\") {\n\t\t\t\t\t\tcName = cName + \"filledX\";\n\t\t\t\t\t} else if (e === \"O\") {\n\t\t\t\t\t\tcName = cName + \"filledO\";\n\t\t\t\t\t}\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tclassName={cName}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tcheckThisBox(i);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{e}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t<div className={modal ? \"modal show\" : \"modal\"}>\n\t\t\t\t<h2>{message.title}</h2>\n\t\t\t\t<div className='content'>{message.description}</div>\n\t\t\t\t<div className='actions'>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='toggle-button'\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\ttoggleModal();\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tOK\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div style={{ textAlign: \"center\" }}>\n\t\t\t\t<div\n\t\t\t\t\tclassName={isReset ? \"resetBtn show\" : \"resetBtn\"}\n\t\t\t\t\tonClick={resetBoard}\n\t\t\t\t>\n\t\t\t\t\tReset Board\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}